// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  BASIC
  ADMIN
}

model User {
  id             String          @id @default(uuid())
  name           String
  email          String?
  age            Int?
  isAdmin        Role            @default(BASIC)
  writtenPosts   Post[]          @relation("WrittenPosts")
  favouritePosts Post[]          @relation("FavouriteByPosts")
  preferences    UserPreference? @relation(fields: [preferenceId], references: [id])
  preferenceId   String?         @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt()
  //create compound index with multiple fields
  //@@unique([age, name])

  @@unique([email])
}

model UserPreference {
  id           String   @id @default(uuid())
  emailUpdates Boolean
  user         User?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()
}

model Post {
  id            String     @id @default(uuid())
  title         String
  content       String
  rating        Float?
  author        User       @relation("WrittenPosts", fields: [authorId], references: [id])
  authorId      String
  favouriteBy   User       @relation("FavouriteByPosts", fields: [favouriteById], references: [id])
  favouriteById String
  categories    Category[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt()

  //way of create complex index
  //@@index([title, authorId])
}

model Category {
  id        String   @id @default(uuid())
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}
